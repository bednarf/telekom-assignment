/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.8
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { Product } from '../fakestore-schemas.ts';

const api = axios.create({
  baseURL: 'https://fakestoreapi.com',
});

/**
 * Retrieve a list of all available products.
 * @summary Get all products
 */
export const getAllProducts = (options?: AxiosRequestConfig): Promise<AxiosResponse<Product[]>> => {
  return api.get(`/products`, options);
};

export const getGetAllProductsQueryKey = () => {
  return [`/products`] as const;
};

export const getGetAllProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProducts>>> = ({ signal }) =>
    getAllProducts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllProducts>>>;
export type GetAllProductsQueryError = AxiosError<void>;

/**
 * @summary Get all products
 */

export function useGetAllProducts<
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllProductsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new product.
 * @summary Add a new product
 */
export const addProduct = (
  product: Product,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return api.post(`/products`, product, options);
};

export const getAddProductMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addProduct>>,
    TError,
    { data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addProduct>>,
  TError,
  { data: Product },
  TContext
> => {
  const mutationKey = ['addProduct'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof addProduct>>, { data: Product }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return addProduct(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddProductMutationResult = NonNullable<Awaited<ReturnType<typeof addProduct>>>;
export type AddProductMutationBody = Product;
export type AddProductMutationError = AxiosError<void>;

/**
 * @summary Add a new product
 */
export const useAddProduct = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addProduct>>,
    TError,
    { data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof addProduct>>,
  TError,
  { data: Product },
  TContext
> => {
  const mutationOptions = getAddProductMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve details of a specific product by ID.
 * @summary Get a single product
 */
export const getProductById = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return api.get(`/products/${id}`, options);
};

export const getGetProductByIdQueryKey = (id: number) => {
  return [`/products/${id}`] as const;
};

export const getGetProductByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductById>>> = ({ signal }) =>
    getProductById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductById>>>;
export type GetProductByIdQueryError = AxiosError<void>;

/**
 * @summary Get a single product
 */

export function useGetProductById<
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetProductByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing product by ID.
 * @summary Update a product
 */
export const updateProduct = (
  id: number,
  product: Product,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return axios.put(`/products/${id}`, product, options);
};

export const getUpdateProductMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProduct>>,
    TError,
    { id: number; data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProduct>>,
  TError,
  { id: number; data: Product },
  TContext
> => {
  const mutationKey = ['updateProduct'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProduct>>,
    { id: number; data: Product }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateProduct(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProductMutationResult = NonNullable<Awaited<ReturnType<typeof updateProduct>>>;
export type UpdateProductMutationBody = Product;
export type UpdateProductMutationError = AxiosError<void>;

/**
 * @summary Update a product
 */
export const useUpdateProduct = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProduct>>,
    TError,
    { id: number; data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateProduct>>,
  TError,
  { id: number; data: Product },
  TContext
> => {
  const mutationOptions = getUpdateProductMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a specific product by ID.
 * @summary Delete a product
 */
export const deleteProduct = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/products/${id}`, options);
};

export const getDeleteProductMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProduct>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProduct>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteProduct'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProduct>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteProduct(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProduct>>>;

export type DeleteProductMutationError = AxiosError<void>;

/**
 * @summary Delete a product
 */
export const useDeleteProduct = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProduct>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteProduct>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteProductMutationOptions(options);

  return useMutation(mutationOptions);
};
