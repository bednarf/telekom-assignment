/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.8
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { Cart } from '../fakestore-schemas.ts';

/**
 * Retrieve a list of all available carts.
 * @summary Get all carts
 */
export const getAllCarts = (options?: AxiosRequestConfig): Promise<AxiosResponse<Cart[]>> => {
  return axios.get(`/carts`, options);
};

export const getGetAllCartsQueryKey = () => {
  return [`/carts`] as const;
};

export const getGetAllCartsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCartsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCarts>>> = ({ signal }) =>
    getAllCarts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCarts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCartsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCarts>>>;
export type GetAllCartsQueryError = AxiosError<void>;

/**
 * @summary Get all carts
 */

export function useGetAllCarts<
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCartsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new cart.
 * @summary Add a new cart
 */
export const addCart = (cart: Cart, options?: AxiosRequestConfig): Promise<AxiosResponse<Cart>> => {
  return axios.post(`/carts`, cart, options);
};

export const getAddCartMutationOptions = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCart>>,
    TError,
    { data: Cart },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof addCart>>, TError, { data: Cart }, TContext> => {
  const mutationKey = ['addCart'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof addCart>>, { data: Cart }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return addCart(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCartMutationResult = NonNullable<Awaited<ReturnType<typeof addCart>>>;
export type AddCartMutationBody = Cart;
export type AddCartMutationError = AxiosError<void>;

/**
 * @summary Add a new cart
 */
export const useAddCart = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCart>>,
    TError,
    { data: Cart },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof addCart>>, TError, { data: Cart }, TContext> => {
  const mutationOptions = getAddCartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve details of a specific cart by ID.
 * @summary Get a single cart
 */
export const getCartById = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Cart>> => {
  return axios.get(`/carts/${id}`, options);
};

export const getGetCartByIdQueryKey = (id: number) => {
  return [`/carts/${id}`] as const;
};

export const getGetCartByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCartByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartById>>> = ({ signal }) =>
    getCartById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCartById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCartByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCartById>>>;
export type GetCartByIdQueryError = AxiosError<void>;

/**
 * @summary Get a single cart
 */

export function useGetCartById<
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCartByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing cart by ID.
 * @summary Update a cart
 */
export const updateCart = (
  id: number,
  cart: Cart,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Cart>> => {
  return axios.put(`/carts/${id}`, cart, options);
};

export const getUpdateCartMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCart>>,
    TError,
    { id: number; data: Cart },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCart>>,
  TError,
  { id: number; data: Cart },
  TContext
> => {
  const mutationKey = ['updateCart'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCart>>,
    { id: number; data: Cart }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCart(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCartMutationResult = NonNullable<Awaited<ReturnType<typeof updateCart>>>;
export type UpdateCartMutationBody = Cart;
export type UpdateCartMutationError = AxiosError<void>;

/**
 * @summary Update a cart
 */
export const useUpdateCart = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCart>>,
    TError,
    { id: number; data: Cart },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCart>>,
  TError,
  { id: number; data: Cart },
  TContext
> => {
  const mutationOptions = getUpdateCartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a specific cart by ID.
 * @summary Delete a cart
 */
export const deleteCart = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/carts/${id}`, options);
};

export const getDeleteCartMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCart>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCart>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteCart'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCart>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteCart(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCartMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCart>>>;

export type DeleteCartMutationError = AxiosError<void>;

/**
 * @summary Delete a cart
 */
export const useDeleteCart = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCart>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteCart>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteCartMutationOptions(options);

  return useMutation(mutationOptions);
};
