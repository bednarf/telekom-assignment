/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.8
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { User } from '../fakestore-schemas.ts';

/**
 * Retrieve a list of all users.
 * @summary Get all users
 */
export const getAllUsers = (options?: AxiosRequestConfig): Promise<AxiosResponse<User[]>> => {
  return axios.get(`/users`, options);
};

export const getGetAllUsersQueryKey = () => {
  return [`/users`] as const;
};

export const getGetAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) =>
    getAllUsers({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>;
export type GetAllUsersQueryError = AxiosError<void>;

/**
 * @summary Get all users
 */

export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new user.
 * @summary Add a new user
 */
export const addUser = (user: User, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> => {
  return axios.post(`/users`, user, options);
};

export const getAddUserMutationOptions = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUser>>,
    TError,
    { data: User },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof addUser>>, TError, { data: User }, TContext> => {
  const mutationKey = ['addUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof addUser>>, { data: User }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return addUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddUserMutationResult = NonNullable<Awaited<ReturnType<typeof addUser>>>;
export type AddUserMutationBody = User;
export type AddUserMutationError = AxiosError<void>;

/**
 * @summary Add a new user
 */
export const useAddUser = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUser>>,
    TError,
    { data: User },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof addUser>>, TError, { data: User }, TContext> => {
  const mutationOptions = getAddUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve details of a specific user by ID.
 * @summary Get a single user
 */
export const getUserById = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.get(`/users/${id}`, options);
};

export const getGetUserByIdQueryKey = (id: number) => {
  return [`/users/${id}`] as const;
};

export const getGetUserByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({ signal }) =>
    getUserById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>;
export type GetUserByIdQueryError = AxiosError<void>;

/**
 * @summary Get a single user
 */

export function useGetUserById<
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = AxiosError<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing user by ID.
 * @summary Update a user
 */
export const updateUser = (
  id: number,
  user: User,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.put(`/users/${id}`, user, options);
};

export const getUpdateUserMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { id: number; data: User },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { id: number; data: User },
  TContext
> => {
  const mutationKey = ['updateUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUser>>,
    { id: number; data: User }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateUser(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>;
export type UpdateUserMutationBody = User;
export type UpdateUserMutationError = AxiosError<void>;

/**
 * @summary Update a user
 */
export const useUpdateUser = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { id: number; data: User },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { id: number; data: User },
  TContext
> => {
  const mutationOptions = getUpdateUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a specific user by ID.
 * @summary Delete a user
 */
export const deleteUser = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/users/${id}`, options);
};

export const getDeleteUserMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteUser(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>;

export type DeleteUserMutationError = AxiosError<void>;

/**
 * @summary Delete a user
 */
export const useDeleteUser = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof deleteUser>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions);
};
